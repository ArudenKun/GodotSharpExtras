using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using GodotSharpExtras.SourceGenerators.Utilities;

namespace GodotSharpExtras.SourceGenerators.Extensions;

internal static class StringExtensions
{
    public static string Truncate(this string source, int maxChars)
    {
        return source.Length <= maxChars ? source : source[..maxChars];
    }

    public static string SanitizeName(this string name, char replacementChar = '_')
    {
        var blackList = new HashSet<char>(Path.GetInvalidFileNameChars()) { '"' }; // '"' not invalid in Linux, but causes problems
        var output = name.ToCharArray();
        for (int i = 0, ln = output.Length; i < ln; i++)
        {
            if (blackList.Contains(output[i]))
            {
                output[i] = replacementChar;
            }
        }

        return new string(output);
    }

    public static string RemoveNameof(this string value)
    {
        value = value ?? throw new ArgumentNullException(nameof(value));

        return value.Contains("nameof(")
            ? value[(value.LastIndexOf('.') + 1)..].TrimEnd(')', ' ')
            : value;
    }

    public static bool IsNullOrEmpty(this string? source) => string.IsNullOrEmpty(source);

    public static bool IsNotNullOrEmpty(this string? source) => !string.IsNullOrEmpty(source);

    public static string AddAutoGeneratedMessage(this string source)
    {
        var stringBuilder = new StringBuilder();
        stringBuilder.AppendLine(SourceStringBuilder.TopMessage);
        stringBuilder.AppendLine("#nullable enable");
        stringBuilder.AppendLine();
        stringBuilder.AppendLine(source);
        stringBuilder.AppendLine(SourceStringBuilder.BottomMessage);
        return stringBuilder.ToString();
    }
}
